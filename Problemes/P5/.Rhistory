xlab('Actual') + ylab('Predicted')
ggplot() +
geom_point(aes(x = test.set$perm, y = pred), colour = 'red') +
stat_smooth(method = 'lm', col = 'blue') +
ggtitle('Actual vs Predicted (NN)') + theme(legend.position="none") +
xlab('Actual') + ylab('Predicted')
ggplot(test.set, aes(x = test.set$perm, y = pred)) +
geom_point(colour = 'red') +
stat_smooth(method = 'lm', col = 'blue') +
ggtitle('Actual vs Predicted (NN)') + theme(legend.position="none") +
xlab('Actual') + ylab('Predicted')
ggplot(test.set, aes(x = test.set$perm, y = pred)) +
geom_point(colour = 'red') +
geom_smooth(method = 'lm', col = 'blue') +
ggtitle('Actual vs Predicted (NN)') + theme(legend.position="none") +
xlab('Actual') + ylab('Predicted')
ggplot(test.set, aes(x = test.set$perm, y = pred)) +
geom_point() +
geom_smooth(method = 'lm', col = 'blue') +
ggtitle('Actual vs Predicted (NN)') + theme(legend.position="none") +
xlab('Actual') + ylab('Predicted')
ggplot(test.set, aes(x = test.set$perm, y = pred)) +
geom_point(colour = 'red') +
geom_smooth(method = 'lm', col = 'blue') +
ggtitle('Actual vs Predicted (NN)') + theme(legend.position="none") +
xlab('Actual') + ylab('Predicted')
ggplot(test.set, aes(x = test.set$perm, y = pred)) +
geom_point() +
geom_smooth(method = 'lm', col = 'darkred') +
ggtitle('Actual vs Predicted (NN)') + theme(legend.position="none") +
xlab('Actual') + ylab('Predicted')
ggplot(test.set, aes(x = test.set$perm, y = pred)) +
geom_point() +
geom_smooth(method = 'lm', col = 'darkred') +
ggtitle('Actual vs Predicted (NN)') + theme(legend.position="none") +
xlab('Actual') + ylab('Predicted')
ggplot(test.set, aes(x = test.set$perm, y = pred)) +
geom_point() +
geom_smooth(method = 'lm', col = 'darkred') +
ggtitle('Actual vs Predicted (NN)') + theme(legend.position="none") +
xlab('Actual') + ylab('Predicted')
ggplot(test.set, aes(x = perm, y = pred)) +
geom_point() +
geom_smooth(method = 'lm', col = 'darkred') +
ggtitle('Actual vs Predicted (NN)') + theme(legend.position="none") +
xlab('Actual') + ylab('Predicted')
ggplot(test.set, aes(x = perm, y = pred)) +
geom_point() +
geom_smooth(method = 'lm', col = 'darkred') +
ggtitle('Actual vs Predicted (NN)') + theme(legend.position="none") +
xlab('Actual') + ylab('Predicted')
library(datasets)
library(caTools)
library(ggplot2)
data(rock)
?rock
rock.df <- data.frame(area  = scale(rock$area),
perim = scale(rock$peri),
shape = scale(rock$shape),
perm  = log(rock$perm))
split = sample.split(rock.df$perm, SplitRatio = 0.8)
training.set = subset(rock.df, split == TRUE)
test.set = subset(rock.df, split == FALSE)
trc <- trainControl(method = 'LOOCV')
sizes <- seq(1, 15, by = 1)
decays <- 10^seq(-3, 0, by = 0.1)
nnet.model <- train(perm ~ .,
data = training.set,
linout = TRUE, trace = FALSE,
method = 'nnet', metric = 'RMSE',
trControl = trc, maxit = 2000,
tuneGrid = expand.grid(.size = sizes,
.decay = decays))
nnet.model$bestTune
pred <- predict(nnet.model, newdata = test.set)
ggplot(test.set, aes(x = perm, y = pred)) +
geom_point() +
geom_smooth(method = 'lm', col = 'darkred') +
ggtitle('Actual vs Predicted (NN)') + theme(legend.position="none") +
xlab('Actual') + ylab('Predicted')
pred <- predict(nnet.model, newdata = test.set)
nnet.model$results
nnet.model$results[-1]
last(nnet.model$results)
?last
last(nnet.model$results)
library(sfsmisc)
last(nnet.model$results)
last(t(nnet.model$results))
nnet.model$results
nnet.model$bestTune
nnet.model$bestTune
a <- nnet.model$bestTune
a <- nnet.model
nnet.model
nnet.model$results
nnet.model$results[137, ]
nnet.model$results[nnet.model$bestTune, ]
nnet.model$results[nnet.model$bestTune]
nnet.model$results[nnet.model$bestTune, ]
nnet.model$bestTune
a <- nnet.model$bestTune
View(a)
View(a)
which(a)
as.numeric(rownames(a))
View(a)
View(a)
View(training.set)
View(training.set)
(best <- nnet.model$bestTune)
(rmse <- nnet.model$results[as.numeric(row.names(best))])
(rmse <- nnet.model$results[as.numeric(rownames(best))])
(best <- nnet.model$bestTune)
(rmse <- nnet.model$results[as.numeric(rownames(best))])
(rmse <- nnet.model$results[as.numeric(rownames(best)),])
(rmse <- nnet.model$results[as.numeric(row.names(best)),])
(rmse <- nnet.model$results[as.numeric(row.names(best)),]$RMSE)
(best <- nnet.model$bestTune)
(rmse <- nnet.model$results[as.numeric(row.names(best)),]$RMSE)
(best <- nnet.model$bestTune)
(best <- nnet.model$bestTune)
(rmse <- nnet.model$results[as.numeric(row.names(best)),]$RMSE)
pred <- predict(nnet.model, newdata = test.set)
(best <- nnet.model$bestTune)
(rmse <- nnet.model$results[as.numeric(row.names(best)),]$RMSE)
pred <- predict(nnet.model, newdata = test.set)
rand.corrupt <- min(rpois(n, lambda = 1.01))
?apply
library(caret)
letters.df <- read.table('letters.txt')
corrupt <- function(bits) {
rand.corrupt <- min(rpois(1, lambda = 1.01), 35)
change.pos <- sample(35, size = n)
mask <- rep(0, times = 35)
mask[change.pos] <- 1
changed.bits <- xor(bits, mask)
return(as.numeric(changed.bits))
}
generateCorrupt <- function(df, n) {
samples.df <- sample(1:nrow(df), n, replace = TRUE)
rand.corrupt <- min(rpois(n, lambda = 1.01), 35)
new.data <- data.frame()
apply(samples.df, MARGIN = 1, FUN = corrupt)
# for (i in 1:length(samples.df)) {
#   element <- samples.df[i]
#   corrupted <- corrupt(df[element, -36], rand.corrupt[i])
#   new.obs <- c(corrupted, df[element, 36])
#   new.data <- rbind(new.data, new.obs)
#   new.data[i, 36] <- as.character(df[element, 36])
# }
colnames(new.data) <- c(1:35, "letter")
new.data$letter <- as.factor(new.data$letter)
return(new.data)
}
training.set <- generateCorrupt(letters.df, 1500)
training.set <- generateCorrupt(letters.df, 1500)
training.set <- generateCorrupt(letters.df, 1500)
generateCorrupt <- function(df, n) {
print(samples.df <- sample(1:nrow(df), n, replace = TRUE))
rand.corrupt <- min(rpois(n, lambda = 1.01), 35)
new.data <- data.frame()
apply(samples.df, MARGIN = 1, FUN = corrupt)
# for (i in 1:length(samples.df)) {
#   element <- samples.df[i]
#   corrupted <- corrupt(df[element, -36], rand.corrupt[i])
#   new.obs <- c(corrupted, df[element, 36])
#   new.data <- rbind(new.data, new.obs)
#   new.data[i, 36] <- as.character(df[element, 36])
# }
colnames(new.data) <- c(1:35, "letter")
new.data$letter <- as.factor(new.data$letter)
return(new.data)
}
training.set <- generateCorrupt(letters.df, 1500)
sample(1:nrow(letters.df), n, replace = TRUE)
a <- sample(1:nrow(letters.df), 1000, replace = TRUE)
generateCorrupt <- function(df, n) {
idx <- sample(1:nrow(df), n, replace = TRUE)
rand.corrupt <- min(rpois(n, lambda = 1.01), 35)
new.data <- t(apply(df[idx,], MARGIN = 1, FUN = corrupt))
new.data <- data.frame(new.data)
# for (i in 1:length(samples.df)) {
#   element <- samples.df[i]
#   corrupted <- corrupt(df[element, -36], rand.corrupt[i])
#   new.obs <- c(corrupted, df[element, 36])
#   new.data <- rbind(new.data, new.obs)
#   new.data[i, 36] <- as.character(df[element, 36])
# }
colnames(new.data) <- c(1:35, "letter")
new.data$letter <- as.factor(new.data$letter)
return(new.data)
}
training.set <- generateCorrupt(letters.df, 1500)
generateCorrupt <- function(df, n) {
idx <- sample(1:nrow(df), n, replace = TRUE)
new.data <- t(apply(df[idx,], MARGIN = 1, FUN = corrupt))
new.data <- data.frame(new.data)
# for (i in 1:length(samples.df)) {
#   element <- samples.df[i]
#   corrupted <- corrupt(df[element, -36], rand.corrupt[i])
#   new.obs <- c(corrupted, df[element, 36])
#   new.data <- rbind(new.data, new.obs)
#   new.data[i, 36] <- as.character(df[element, 36])
# }
colnames(new.data) <- c(1:35, "letter")
new.data$letter <- as.factor(new.data$letter)
return(new.data)
}
corrupt <- function(bits) {
rand.corrupt <- min(rpois(1, lambda = 1.01), 35)
change.pos <- sample(35, size = rand.corrupt)
mask <- rep(0, times = 35)
mask[change.pos] <- 1
changed.bits <- xor(bits, mask)
return(as.numeric(changed.bits))
}
generateCorrupt <- function(df, n) {
idx <- sample(1:nrow(df), n, replace = TRUE)
new.data <- t(apply(df[idx,], MARGIN = 1, FUN = corrupt))
new.data <- data.frame(new.data)
# for (i in 1:length(samples.df)) {
#   element <- samples.df[i]
#   corrupted <- corrupt(df[element, -36], rand.corrupt[i])
#   new.obs <- c(corrupted, df[element, 36])
#   new.data <- rbind(new.data, new.obs)
#   new.data[i, 36] <- as.character(df[element, 36])
# }
colnames(new.data) <- c(1:35, "letter")
new.data$letter <- as.factor(new.data$letter)
return(new.data)
}
training.set <- generateCorrupt(letters.df, 1500)
corrupt <- function(bits) {
rand.corrupt <- min(rpois(1, lambda = 1.01), 35)
change.pos <- sample(35, size = rand.corrupt)
mask <- rep(0, times = 35)
mask[change.pos] <- 1
changed.bits <- xor(as.integer(bits), mask)
return(as.numeric(changed.bits))
}
generateCorrupt <- function(df, n) {
idx <- sample(1:nrow(df), n, replace = TRUE)
new.data <- t(apply(df[idx,], MARGIN = 1, FUN = corrupt))
new.data <- data.frame(new.data)
# for (i in 1:length(samples.df)) {
#   element <- samples.df[i]
#   corrupted <- corrupt(df[element, -36], rand.corrupt[i])
#   new.obs <- c(corrupted, df[element, 36])
#   new.data <- rbind(new.data, new.obs)
#   new.data[i, 36] <- as.character(df[element, 36])
# }
colnames(new.data) <- c(1:35, "letter")
new.data$letter <- as.factor(new.data$letter)
return(new.data)
}
training.set <- generateCorrupt(letters.df, 1500)
warnings()
corrupt <- function(bits) {
rand.corrupt <- min(rpois(1, lambda = 1.01), 35)
change.pos <- sample(35, size = rand.corrupt)
mask <- rep(0, times = 35)
mask[change.pos] <- 1
changed.bits <- xor(bits[1:35], mask)
return(as.numeric(changed.bits))
}
generateCorrupt <- function(df, n) {
idx <- sample(1:nrow(df), n, replace = TRUE)
new.data <- t(apply(df[idx,], MARGIN = 1, FUN = corrupt))
new.data <- data.frame(new.data)
# for (i in 1:length(samples.df)) {
#   element <- samples.df[i]
#   corrupted <- corrupt(df[element, -36], rand.corrupt[i])
#   new.obs <- c(corrupted, df[element, 36])
#   new.data <- rbind(new.data, new.obs)
#   new.data[i, 36] <- as.character(df[element, 36])
# }
colnames(new.data) <- c(1:35, "letter")
new.data$letter <- as.factor(new.data$letter)
return(new.data)
}
training.set <- generateCorrupt(letters.df, 1500)
corrupt <- function(bits) {
rand.corrupt <- min(rpois(1, lambda = 1.01), 35)
change.pos <- sample(35, size = rand.corrupt)
mask <- rep(0, times = 35)
mask[change.pos] <- 1
changed.bits <- xor(as.numeric(bits[1:35]), mask)
return(as.numeric(changed.bits))
}
generateCorrupt <- function(df, n) {
idx <- sample(1:nrow(df), n, replace = TRUE)
new.data <- t(apply(df[idx,], MARGIN = 1, FUN = corrupt))
new.data <- data.frame(new.data)
# for (i in 1:length(samples.df)) {
#   element <- samples.df[i]
#   corrupted <- corrupt(df[element, -36], rand.corrupt[i])
#   new.obs <- c(corrupted, df[element, 36])
#   new.data <- rbind(new.data, new.obs)
#   new.data[i, 36] <- as.character(df[element, 36])
# }
colnames(new.data) <- c(1:35, "letter")
new.data$letter <- as.factor(new.data$letter)
return(new.data)
}
training.set <- generateCorrupt(letters.df, 1500)
[1,2,3] + [2]
[1,2,3] ++ [2]
c([1,2,3], [2])
c(c(1,2,3), c(2))
corrupt <- function(bits) {
rand.corrupt <- min(rpois(1, lambda = 1.01), 35)
change.pos <- sample(35, size = rand.corrupt)
mask <- rep(0, times = 35)
mask[change.pos] <- 1
changed.bits <- xor(as.numeric(bits[1:35]), mask)
corrupted <- c(changed.bits, bits[36])
return(as.numeric(changed.bits))
}
generateCorrupt <- function(df, n) {
idx <- sample(1:nrow(df), n, replace = TRUE)
new.data <- t(apply(df[idx,], MARGIN = 1, FUN = corrupt))
new.data <- data.frame(new.data)
# for (i in 1:length(samples.df)) {
#   element <- samples.df[i]
#   corrupted <- corrupt(df[element, -36], rand.corrupt[i])
#   new.obs <- c(corrupted, df[element, 36])
#   new.data <- rbind(new.data, new.obs)
#   new.data[i, 36] <- as.character(df[element, 36])
# }
colnames(new.data) <- c(1:35, "letter")
new.data$letter <- as.factor(new.data$letter)
return(new.data)
}
training.set <- generateCorrupt(letters.df, 1500)
corrupt <- function(bits) {
rand.corrupt <- min(rpois(1, lambda = 1.01), 35)
change.pos <- sample(35, size = rand.corrupt)
mask <- rep(0, times = 35)
mask[change.pos] <- 1
changed.bits <- xor(as.numeric(bits[1:35]), mask)
corrupted <- c(changed.bits, bits[36])
return(as.numeric(changed.bits))
}
generateCorrupt <- function(df, n) {
idx <- sample(1:nrow(df), n, replace = TRUE)
new.data <- t(apply(df[idx,], MARGIN = 1, FUN = corrupt))
new.data <- data.frame(new.data)
# for (i in 1:length(samples.df)) {
#   element <- samples.df[i]
#   corrupted <- corrupt(df[element, -36], rand.corrupt[i])
#   new.obs <- c(corrupted, df[element, 36])
#   new.data <- rbind(new.data, new.obs)
#   new.data[i, 36] <- as.character(df[element, 36])
# }
colnames(new.data) <- c(1:35, "letter")
new.data$letter <- as.factor(new.data$letter)
return(new.data)
}
training.set <- generateCorrupt(letters.df, 1500)
library(caret)
letters.df <- read.table('letters.txt')
corrupt <- function(bits) {
rand.corrupt <- min(rpois(1, lambda = 1.01), 35)
change.pos <- sample(35, size = rand.corrupt)
mask <- rep(0, times = 35)
mask[change.pos] <- 1
changed.bits <- xor(as.numeric(bits[1:35]), mask)
corrupted <- c(changed.bits, bits[36])
return(as.numeric(changed.bits))
}
generateCorrupt <- function(df, n) {
idx <- sample(1:nrow(df), n, replace = TRUE)
new.data <- t(apply(df[idx,], MARGIN = 1, FUN = corrupt))
new.data <- data.frame(new.data)
# for (i in 1:length(samples.df)) {
#   element <- samples.df[i]
#   corrupted <- corrupt(df[element, -36], rand.corrupt[i])
#   new.obs <- c(corrupted, df[element, 36])
#   new.data <- rbind(new.data, new.obs)
#   new.data[i, 36] <- as.character(df[element, 36])
# }
colnames(new.data) <- c(1:35, "letter")
new.data$letter <- as.factor(new.data$letter)
return(new.data)
}
training.set <- generateCorrupt(letters.df, 1500)
training.set <- generateCorrupt(letters.df, 1500)
corrupt <- function(bits) {
rand.corrupt <- min(rpois(1, lambda = 1.01), 35)
change.pos <- sample(35, size = rand.corrupt)
mask <- rep(0, times = 35)
mask[change.pos] <- 1
changed.bits <- xor(as.numeric(bits[1:35]), mask)
print(corrupted <- c(changed.bits, bits[36]))
return(as.numeric(changed.bits))
}
generateCorrupt <- function(df, n) {
idx <- sample(1:nrow(df), n, replace = TRUE)
new.data <- t(apply(df[idx,], MARGIN = 1, FUN = corrupt))
new.data <- data.frame(new.data)
# for (i in 1:length(samples.df)) {
#   element <- samples.df[i]
#   corrupted <- corrupt(df[element, -36], rand.corrupt[i])
#   new.obs <- c(corrupted, df[element, 36])
#   new.data <- rbind(new.data, new.obs)
#   new.data[i, 36] <- as.character(df[element, 36])
# }
colnames(new.data) <- c(1:35, "letter")
new.data$letter <- as.factor(new.data$letter)
return(new.data)
}
training.set <- generateCorrupt(letters.df, 1500)
corrupt <- function(bits) {
rand.corrupt <- min(rpois(1, lambda = 1.01), 35)
change.pos <- sample(35, size = rand.corrupt)
mask <- rep(0, times = 35)
mask[change.pos] <- 1
changed.bits <- xor(as.numeric(bits[1:35]), mask)
corrupted <- c(as.numeric(changed.bits), bits[36])
return(as.numeric(changed.bits))
}
generateCorrupt <- function(df, n) {
idx <- sample(1:nrow(df), n, replace = TRUE)
new.data <- t(apply(df[idx,], MARGIN = 1, FUN = corrupt))
new.data <- data.frame(new.data)
# for (i in 1:length(samples.df)) {
#   element <- samples.df[i]
#   corrupted <- corrupt(df[element, -36], rand.corrupt[i])
#   new.obs <- c(corrupted, df[element, 36])
#   new.data <- rbind(new.data, new.obs)
#   new.data[i, 36] <- as.character(df[element, 36])
# }
colnames(new.data) <- c(1:35, "letter")
new.data$letter <- as.factor(new.data$letter)
return(new.data)
}
training.set <- generateCorrupt(letters.df, 1500)
corrupt <- function(bits) {
rand.corrupt <- min(rpois(1, lambda = 1.01), 35)
change.pos <- sample(35, size = rand.corrupt)
mask <- rep(0, times = 35)
mask[change.pos] <- 1
changed.bits <- xor(as.numeric(bits[1:35]), mask)
corrupted <- c(as.numeric(changed.bits), bits[36])
return(corrupted)
}
generateCorrupt <- function(df, n) {
idx <- sample(1:nrow(df), n, replace = TRUE)
new.data <- t(apply(df[idx,], MARGIN = 1, FUN = corrupt))
new.data <- data.frame(new.data)
# for (i in 1:length(samples.df)) {
#   element <- samples.df[i]
#   corrupted <- corrupt(df[element, -36], rand.corrupt[i])
#   new.obs <- c(corrupted, df[element, 36])
#   new.data <- rbind(new.data, new.obs)
#   new.data[i, 36] <- as.character(df[element, 36])
# }
colnames(new.data) <- c(1:35, "letter")
new.data$letter <- as.factor(new.data$letter)
return(new.data)
}
training.set <- generateCorrupt(letters.df, 1500)
test.set <- generateCorrupt(letters.df, 500)
View(training.set)
View(training.set)
training.set
seq(1:10)
generateCorrupt <- function(df, n) {
idx <- sample(1:nrow(df), n, replace = TRUE)
new.data <- t(apply(df[idx,], MARGIN = 1, FUN = corrupt))
new.data <- data.frame(new.data)
rownames(new.data) <- seq(1:n)
colnames(new.data) <- c(1:35, "letter")
new.data$letter <- as.factor(new.data$letter)
return(new.data)
}
training.set <- generateCorrupt(letters.df, 1500)
test.set <- generateCorrupt(letters.df, 500)
training.set
training.set
training.set <- generateCorrupt(letters.df, 1500)
training.set <- generateCorrupt(letters.df, 1500)
test.set <- generateCorrupt(letters.df, 500)
training.set <- generateCorrupt(letters.df, 1500)
training.set <- generateCorrupt(letters.df, 1500)
training.set <- generateCorrupt(letters.df, 1500)
test.set <- generateCorrupt(letters.df, 500)
training.set <- generateCorrupt(letters.df, 1500)
test.set <- generateCorrupt(letters.df, 500)
trc <- trainControl(method = 'repeatedcv',
number = 10, repeats = 5)
nnet.model <- train(letter ~ .,
data = training.set,
method = 'nnet', metric = 'Accuracy',
trControl = trc, maxit = 500)
training.set <- generateCorrupt(letters.df, 500)
test.set <- generateCorrupt(letters.df, 200)
trc <- trainControl(method = 'repeatedcv',
number = 10, repeats = 5)
sizes <- seq(1, 16, by = 2)
decays <- 10^seq(-3, 0, by = 0.1)
trc <- trainControl(method = 'repeatedcv',
number = 10, repeats = 5)
sizes <- seq(1, 16, by = 2)
decays <- 10^seq(-3, 0, by = 0.1)
nnet.model <- train(letter ~ .,
data = training.set, trace = FALSE,
method = 'nnet', metric = 'Accuracy',
trControl = trc, maxit = 500,
tuneGrid = expand.grid(.size = sizes,
.decay = decays))
