curve(expr = 1.454055 / (1 - 0.6944614*cos(x * pi / 180)), add = TRUE, col = "violet",
lwd = 2, from = 40, to = 130)
p <- model$coefficients[1]
e <- model$coefficients[2]
data.plot <- cbind(phi, r)
plot(data.plot, xlab = 'phi', ylab = 'r')
curve(expr = 1.454055 / (1 - 0.6944614*cos(x * pi / 180)), add = TRUE, col = "violet",
lwd = 2, from = 40, to = 130)
grid()
data.plot <- cbind(r, phi)
plot(data.plot, xlab = 'phi', ylab = 'r')
curve(expr = 1.454055 / (1 - 0.6944614*cos(x * pi / 180)), add = TRUE, col = "violet",
lwd = 2, from = 40, to = 130)
data.plot <- cbind(phi, r)
plot(data.plot, xlab = 'phi', ylab = 'r')
p <- model$coefficients[1]
e <- model$coefficients[2]
data.plot <- cbind(phi, r)
plot(data.plot, xlab = 'phi', ylab = 'r')
data.plot <- matrix(c(phi, r), nrow = N)
plot(data.plot, xlab = 'phi', ylab = 'r')
curve(expr = 1.454055 / (1 - 0.6944614*cos(x * pi / 180)), add = TRUE, col = "violet",
lwd = 2, from = 40, to = 130)
grid()
data.plot <- matrix(c(phi, r), nrow = N)
data.plot
data.plot <- matrix(c(data[,2], r), nrow = N)
plot(data.plot, xlab = 'phi', ylab = 'r')
curve(expr = 1.454055 / (1 - 0.6944614*cos(x * pi / 180)), add = TRUE, col = "violet",
lwd = 2, from = 40, to = 130)
data.plot <- cbind(data[,2], r)
plot(data.plot, xlab = 'phi', ylab = 'r')
curve(expr = 1.454055 / (1 - 0.6944614*cos(x * pi / 180)), add = TRUE, col = "violet",
lwd = 2, from = 40, to = 130)
grid()
plot(data.plot, xlab = 'phi', ylab = 'r')
curve(expr = p / (1 - e*cos(x * pi / 180)), add = TRUE,
col = "violet", lwd = 2, from = 40, to = 130)
grid()
h
setwd("~/Projects/MachineLearningAZ/02 - Regression/Section 5 - Multiple Linear Regression")
dataset = read.csv('50_Startups.csv')
state_levels = levels(dataset$State)
state_levels
dataset = read.csv('50_Startups.csv')
dataset$State = factor(dataset$State,
levels = levels(dataset$State),
labels = seq(1, length(state_levels)))
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
1..3
seq(1, 3)
remove(state_levels)
training_set
regressor = lm(formula = Profit ~ ., data = training_set)
summary(regressor)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend, data = training_set)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Marketing.Spend, data = training_set)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Marketing.Spend, data = training_set)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend, data = training_set)
summary(regressor)
y_pred = predict(regressor, newdata = test_set)
y_pred
library(ggplot2)
ggplot() +
geom_point(aes(x = test_set$R.D.Spend, y = test_set$Profit), colour = 'red') +
geom_line(aes(x = test_set$R.D.Spend, y = y_pred), colour = 'blue') +
ggtitle('RD Spend vs Profit') + xlab('RD Spend') + ylab('Profit')
View(dataset)
View(dataset)
summary(regressor)
max(summary(regressor))
a = summary(regressor)
setwd("~/Projects/MachineLearningAZ/02 - Regression/Section 6 - Polynomial Regression")
dataset = read.csv('Position_Salaries.csv')
View(dataset)
View(dataset)
dataset[1,]
dataset = dataset[,2:3]
dataset
lin_reg = lm(formula = Salary ~ .,
data = dataset)
summary(lin_reg)
5 ^2
# Polynomial regression
# Import the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Split dataset into train and test dataset
# library("caTools")
# set.seed(123)
# split = sample.split(dataset$Purchased, SplitRatio = 0.8)
# training_set = subset(dataset, split == TRUE)
# test_set = subset(dataset, split == FALSE)
# Fitting linear Regression to the dataset
lin_reg = lm(formula = Salary ~ .,
data = dataset)
summary(lin_reg)
# Fitting Polynomial Regression to the dataset
dataset$Level.2 = dataset$Level ^ 2
dataset$Level.3 = dataset$Level ^ 3
poly_reg = lm(formula = Salary ~ .,
data = dataset)
summary(poly_reg)
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, dataset)), colour = 'blue') +
ggtitle('Salary vs Level') + xlab('Level') + ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, dataset)), colour = 'blue') +
ggtitle('Salary vs Level (Polynomial)') + xlab('Level') + ylab('Salary')
dataset$Level.2 = dataset$Level ^ 2
dataset$Level.3 = dataset$Level ^ 3
dataset$Level.4 = dataset$Level ^ 4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
summary(poly_reg)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, dataset)), colour = 'blue') +
ggtitle('Salary vs Level (Polynomial)') + xlab('Level') + ylab('Salary')
dataset$Level.2 = dataset$Level ^ 2
dataset$Level.3 = dataset$Level ^ 3
poly_reg = lm(formula = Salary ~ .,
data = dataset)
summary(poly_reg)
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, dataset)), colour = 'blue') +
ggtitle('Salary vs Level (Linear)') + xlab('Level') + ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, dataset)), colour = 'blue') +
ggtitle('Salary vs Level (Polynomial)') + xlab('Level') + ylab('Salary')
dataset$Level.2 = dataset$Level ^ 2
dataset$Level.3 = dataset$Level ^ 3
dataset$Level.4 = dataset$Level ^ 4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
summary(poly_reg)
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, dataset)), colour = 'blue') +
ggtitle('Salary vs Level (Linear)') + xlab('Level') + ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, dataset)), colour = 'blue') +
ggtitle('Salary vs Level (Polynomial)') + xlab('Level') + ylab('Salary')
predict(lin_reg, 6.5)
predict(lin_reg, data.frame(6.5)
)
predict(lin_reg, data.frame(6.5))
predict(lin_reg, data.frame(Level = 6.5))
y_pred = predict(lin_reg, data.frame(Level = 6.5))
y_pred = predict(lin_reg, data.frame(Level = 6.5, Level.2 = 6.5^2,
Level.3 = 6.5^3, Level.4 = 6.5^4))
y_pred = predict(lin_reg, data.frame(Level = 6.5))
y_pred = predict(lin_reg, data.frame(Level = 6.5, Level.2 = 6.5^2,
Level.3 = 6.5^3, Level.4 = 6.5^4))
y_pred = predict(poly_reg, data.frame(Level = 6.5, Level.2 = 6.5^2,
Level.3 = 6.5^3, Level.4 = 6.5^4))
y_pred = predict(poly_reg, data.frame(Level = 6.5, Level.2 = 6.5^2,
Level.3 = 6.5^3, Level.4 = 6.5^4))
y_pred = predict(lin_reg, data.frame(Level = 6.5))
y_pred = predict(poly_reg, data.frame(Level = 6.5, Level.2 = 6.5^2,
Level.3 = 6.5^3, Level.4 = 6.5^4))
seq(1, 2, 0.1)
setwd("~/Projects/MachineLearningAZ/02 - Regression/Section 7 - Support Vector Regression (SVR)")
setwd("~/Projects/MachineLearningAZ/02 - Regression/Section 7 - Support Vector Regression (SVR)")
dataset <- read.csv('Position_Salaries.csv')
install.packages("e1071")
library(caTools)
library(e1071)
library(e1071)
View(dataset)
View(dataset)
dataset <- read.csv('Position_Salaries.csv')
View(dataset)
View(dataset)
dataset <- dataset[2:3]
library(e1071)
regressor <- svm(formula = Salary ~ .,
data = dataset)
regressor <- svm(formula = Salary ~ .,
data = dataset,
type = 'eps-regression')
summary(regressor)
View(dataset)
library(ggplot2)
x_grid <- seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, data.frame(Level = x_grid))), colour = 'blue') +
ggtitle('Salary vs Level (Polynomial)') + xlab('Level') + ylab('Salary')
regressor
pwd
setwd("~/Projects/MachineLearningAZ/02 - Regression/Section 8 - Decision Tree Regression")
dataset <- read.csv('Dataset.csv')
dataset <- dataset[,]
setwd("~/Projects/MachineLearningAZ/02 - Regression/Section 8 - Decision Tree Regression")
dataset <- read.csv('Position_Salaries.csv')
View(dataset)
View(dataset)
dataset <- dataset[2:3]
install.packages('rpart')
library(rpart)
?rpart
regressor <- rpart(formula = Salary ~ .,
data = dataset)
summary(regressor)
regressor <- rpart(formula = Salary ~ .,
data = dataset)
summary(regressor)
y_pred <- predict(regressor, data.frame(Level = 6.5))
library(ggplot2)
x_grid <- seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, data.frame(Level = x_grid))), colour = 'blue') +
ggtitle('Salary vs Level (Polynomial)') + xlab('Level') + ylab('Salary')
regressor <- rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 1))
summary(regressor)
y_pred <- predict(regressor, data.frame(Level = 6.5))
library(ggplot2)
x_grid <- seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, data.frame(Level = x_grid))), colour = 'blue') +
ggtitle('Salary vs Level (Polynomial)') + xlab('Level') + ylab('Salary')
x_grid <- seq(min(dataset$Level), max(dataset$Level), 1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, data.frame(Level = x_grid))), colour = 'blue') +
ggtitle('Salary vs Level (Polynomial)') + xlab('Level') + ylab('Salary')
regressor <- rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 5))
summary(regressor)
library(ggplot2)
x_grid <- seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, data.frame(Level = x_grid))), colour = 'blue') +
ggtitle('Salary vs Level (Polynomial)') + xlab('Level') + ylab('Salary')
y_pred <- predict(regressor, data.frame(Level = 6.5))
x_grid <- seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, data.frame(Level = x_grid))), colour = 'blue') +
ggtitle('Salary vs Level (Polynomial)') + xlab('Level') + ylab('Salary')
y_pred <- predict(regressor, data.frame(Level = 6.5))
x_grid <- seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, data.frame(Level = x_grid))), colour = 'blue') +
ggtitle('Salary vs Level (Polynomial)') + xlab('Level') + ylab('Salary')
x_grid <- seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, data.frame(Level = x_grid))), colour = 'blue') +
ggtitle('Salary vs Level (Polynomial)') + xlab('Level') + ylab('Salary')
library(rpart)
regressor <- rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 1))
summary(regressor)
y_pred <- predict(regressor, data.frame(Level = 6.5))
library(ggplot2)
x_grid <- seq(min(dataset$Level), max(dataset$Level), 0.01)
y_pred <- predict(regressor, data.frame(Level = 10))
setwd("~/Dropbox/FIB/APA/Laboratori/lab0")
?read.csv
Credit <- read.csv("credsco.csv", header = TRUE, quote = "\"", dec = ".", check.names=TRUE)
View(Credit)
View(Credit)
dim(Credit)
View(Credit)
View(Credit)
names(Credit)
Credit[1:4,]
Credit[1,5:8]
summary(Credit)
?na.omit
Credit.complete <- na.omit(Credit)
dim(Credit.complete)
View(Credit.complete)
View(Credit.complete)
table(Credit[,1]==0)
table(Credit[,3]==0)
table(Credit[,6]==0)
table(Credit[,8]==0)
Credit <- Credit[Credit[,1] != 0 & Credit[,3] != 0 & Credit[,6] != 0 & Credit[,8] != 0,]
dim(Credit)
dim(Credit)
attach(Credit) # this allows the column names of Credit to be visible (use with care)
?attach
hist(Income)
hist(Income[Income != 99999999])
hist(Income[Income != 99999999 & Income != 0], breaks=15)
table(Income == 99999999)
table(Income == 0)
table(Capital == 99999999)
table(ChargesOnCapital == 99999999)
table(YearsInJob == 0)
Income[Income == 99999999 | Income == 0] <- NA
Capital[Capital == 99999999] <- NA
ChargesOnCapital[ChargesOnCapital == 99999999] <- NA
summary(Credit[,10])
summary(Income)
library(class) # knn
aux <- Credit[,-10]
dim(aux)
aux1 <- aux[!is.na(Income),]
dim(aux1)
aux2 <- aux[is.na(Income),]
dim(aux2)
aux <- Credit[,-10]
dim(aux)
auz
aux
Credit[,1]
Credit[,1:2]
Credit[,-1]
aux <- Credit[,-10]
dim(aux)
aux1 <- aux[!is.na(Income),]
dim(aux1)
aux2 <- aux[is.na(Income),]
dim(aux2)
?knn
View(aux)
View(aux)
aux <- Credit[,-10]
dim(aux)
aux1 <- aux[!is.na(Income),]
dim(aux1)
aux2 <- aux[is.na(Income),]
dim(aux2)
View(aux)
View(aux)
View(aux1)
View(aux1)
View(aux2)
View(aux2)
e
E
PI
knn.inc <- knn(aux1,aux2,Income[!is.na(Income)])
Income[is.na(Income)] <- as.numeric(as.character(knn.inc))
aux <- Credit[,-11]
aux1 <- aux[!is.na(Capital),]
aux2 <- aux[is.na(Capital),]
knn.cap <- knn(aux1,aux2,Capital[!is.na(Capital)])
Capital[is.na(Capital)] <- as.numeric(as.character(knn.cap))
aux <- Credit[,-12]
aux1 <- aux[!is.na(ChargesOnCapital),]
aux2 <- aux[is.na(ChargesOnCapital),]
knn.cac <- knn(aux1,aux2, ChargesOnCapital[!is.na(ChargesOnCapital)])
ChargesOnCapital[is.na(ChargesOnCapital)] <- as.numeric(as.character(knn.cac))
ChargesOnCapital[Capital==0] <- 0
Credit[,10] <- Income
Credit[,11] <- Capital
Credit[,12] <- ChargesOnCapital
dim(Credit)
summary(Credit)
Assessment <- as.factor(Assessment)
Housing <- as.factor(Housing)
MaritalStatus <- as.factor(MaritalStatus)
Records <- as.factor(Records)
TypeOfJob <- as.factor(TypeOfJob)
levels(Assessment)
levels(Housing)
levels(MaritalStatus)
levels(Records)
levels(TypeOfJob)
levels(Assessment) <- c("positive","negative")
levels(Housing) <- c("rent","owner","private","ignore","parents","other")
levels(MaritalStatus) <- c("single","married","widower","split","divorced")
levels(Records) <- c("no","yes")
levels(TypeOfJob) <- c("indefinite","temporal","self-employed","other")
is.factor(Assessment)
is.factor(Credit[,1])
FinancingRatio <- 100*AmountRequested/MarketPrice
hist(FinancingRatio)
SavingCapacity <- (Income-Expenses-(ChargesOnCapital/100))/(AmountRequested/Deadline)
hist(SavingCapacity, breaks=16)
Dubious <- rep("No", nrow(Credit))
Dubious[AmountRequested > median(AmountRequested, na.rm = TRUE) & Age < 1.25*mean (Age, na.rm = TRUE)] <- "Yes"
Dubious <- as.factor(Dubious)
table(Dubious,Assessment)
Credit.new <- data.frame(Assessment,YearsInJob,Housing,Deadline,Age,MaritalStatus,Records,TypeOfJob,Expenses,Income,Capital,ChargesOnCapital,AmountRequested,MarketPrice,FinancingRatio,SavingCapacity,Dubious)
summary(Credit.new)
dim(Credit.new)
detach(Credit)   ## this undoes the attach (recommended)
attach(Credit.new)
is.factor(Credit.new[,1])
hist(Income)
hist(Income,col=2)
hist(Capital)
hist(log10(Capital), breaks=20)
boxplot (Deadline)
title ("These are the deadlines")
boxplot (Age, col = "lightgray")
title ("and these are the ages")
boxplot(Credit.new[,9:16], outline=TRUE)
boxplot(Credit.new[,9:16], outline=FALSE) # much better, but would be nicer one by one
table(Age)
min(Age)
max(Age)
Age.cat <- cut(Age, breaks = seq(30, 90, 10)) # WARNING! we are generating NAs
Age.cat
Age.cat <- cut(Age, breaks = seq(15, 75, 10))
Age.tab <- table(Age.cat)
Age.tab
barplot(Age.tab)                                     # bar chart
pie(Age.tab)                                         # pie chart
Age2.cat <- factor(as.integer(Age < 55))
levels(Age2.cat) <- c("over55","under55")
TypeOfJob.Age <- table(TypeOfJob, Age.cat)          # contingency table
TypeOfJob.Age
margin.table(TypeOfJob.Age, 1)                      # row sums
margin.table(TypeOfJob.Age, 2)                      # column sums
prop.table(TypeOfJob.Age)                           # relative freqencies
Age2.cat <- factor(as.integer(Age < 55))
levels(Age2.cat) <- c("over55","under55")
TypeOfJob.Age <- table(TypeOfJob, Age.cat)          # contingency table
TypeOfJob.Age
margin.table(TypeOfJob.Age, 1)                      # row sums
margin.table(TypeOfJob.Age, 2)                      # column sums
prop.table(TypeOfJob.Age)                           # relative freqencies
round(prop.table(TypeOfJob.Age), digits=3)          # idem, rounded to 3 digits
round(prop.table(TypeOfJob.Age) * 100, digits=3)    # total percentages
round(prop.table(TypeOfJob.Age, 1), digits=3)       # table of relative frequencies (row-wise)
Age2.cat <- factor(as.integer(Age < 55))
levels(Age2.cat) <- c("over55","under55")
TypeOfJob.Age <- table(TypeOfJob, Age.cat)          # contingency table
TypeOfJob.Age
margin.table(TypeOfJob.Age, 1)                      # row sums
margin.table(TypeOfJob.Age, 2)                      # column sums
prop.table(TypeOfJob.Age)                           # relative freqencies
round(prop.table(TypeOfJob.Age), digits=3)          # idem, rounded to 3 digits
round(prop.table(TypeOfJob.Age) * 100, digits=3)    # total percentages
round(prop.table(TypeOfJob.Age, 1), digits=3)       # table of relative frequencies (row-wise)
TypeOfJob.Age.rel <- round(prop.table(TypeOfJob.Age, 2), digits=3)      # table of relative frequencies (column-wise)
barplot(TypeOfJob.Age)                                # basic stacked bar chart
barplot(TypeOfJob.Age.rel, yaxt="n", xlab="Age", ylab="proportion",
col = c("white", "grey80", "grey40", "black"),
main = "TypeOfJob by Age", xlim=c(0,9))          # stacked bar chart
legend("bottomleft", legend=rownames(TypeOfJob.Age.rel), col="black",
fill = c("white", "grey80", "grey40", "black"), cex=0.65)
axis(2, at=seq(0, 1, 0.2))
barplot(TypeOfJob.Age.rel, beside = TRUE)                            # grouped bar chart
par(mfrow=c(1,2))
plot (AmountRequested, Capital, main = "Amount req. vs. Market price",
cex = .5, col = "dark red")
plot (log10(AmountRequested), log10(Capital+1), main = "Amount req. vs. Market price (better)", cex = .5, col = "dark red")
abline(v = mean(log10(AmountRequested)), lty = 2, col = "grey40")
abline(h = mean(log10(Capital+1)), lty = 2, col = "grey40")
abline(lm(log10(Capital+1) ~ log10(AmountRequested)), col = "blue")
par(mfrow=c(1,1))
plot (TypeOfJob, AmountRequested)
plot (TypeOfJob, AmountRequested)
plot (Age,Assessment, col="red") # WARNING!
plot (Assessment, Age, col="red") # better
plot (Age,Assessment, col="red") # WARNING!
plot (Assessment, Age, col="red") # better
plot (Assessment, TypeOfJob,col="blue", xlab="Assessment",ylab="TypeOfJob")
pairs(~ AmountRequested + Capital + Age)
hist.with.normal <- function (x, main, xlabel=deparse(substitute(x)), ...)
{
h <- hist(x,plot=F, ...)
s <- sd(x)
m <- mean(x)
ylim <- range(0,h$density,dnorm(0,sd=s))
hist(x,freq=FALSE,ylim=ylim,xlab=xlabel, main=main, ...)
curve(dnorm(x,m,s),add=T,col="red")
}
hist.with.normal (Expenses, "Expenses")
par(mfrow=c(2,4))
for (i in 0:7)
{ plot(density(Credit.new[,i+9]), xlab="", main=names(Credit.new)[i+9]) }
library(MASS)
par(mfrow=c(1,3))
hist(Capital, main="Look at that ...")
bx <- boxcox(I(Capital+1) ~ . - Assessment, data = Credit.new,
lambda = seq(-0.25, 0.25, length = 10))
lambda <- bx$x[which.max(bx$y)]
Capital.BC <- (Capital^lambda - 1)/lambda
hist(Capital.BC, main="Look at that now!")
par (mfrow=c(1,1))
set.seed (104)
Credit.new <- Credit.new[sample.int(nrow(Credit.new)),]
save(Credit.new, file = "Credsco-processed.Rdata")
rm(list = ls())
load("Credsco-processed.Rdata")
objects()
View(Credit.new)
View(Credit.new)
